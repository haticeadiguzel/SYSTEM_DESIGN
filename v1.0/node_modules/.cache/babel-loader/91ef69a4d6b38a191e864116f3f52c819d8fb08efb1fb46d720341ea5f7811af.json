{"ast":null,"code":"var _jsxFileName = \"/home/hatice/Documents/BTK_PROJECTS/SYSTEM_PROJECT/frontend/src/Components/Terminal/terminal.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './terminal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Terminal = () => {\n  _s();\n  const [command, setCommand] = useState('');\n  const [output, setOutput] = useState('');\n  const [threads, setThreads] = useState([]);\n  const executeCommand = () => {\n    if (command.toLowerCase() === 'quit()') {\n      // Handle quit command\n      return;\n    }\n    const newThread = {\n      id: Date.now(),\n      command: command,\n      output: []\n    };\n    setThreads([...threads, newThread]);\n    const process = subprocess.Popen(command, {\n      shell: true,\n      stdout: subprocess.PIPE,\n      stderr: subprocess.PIPE\n    });\n    process.stdout.on('data', data => {\n      newThread.output.push(data.toString('utf-8'));\n      setThreads([...threads]);\n    });\n    process.stderr.on('data', data => {\n      newThread.output.push(`Error:\\n${data.toString('utf-8')}`);\n      setThreads([...threads]);\n    });\n    process.on('close', code => {\n      newThread.output.push(`Command exited with code ${code}`);\n      setThreads([...threads]);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"terminal-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"terminal-output\",\n        children: threads.map(thread => /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Command: \", thread.command]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: thread.output.join('\\n')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 29\n          }, this)]\n        }, thread.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"terminal-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: command,\n        onChange: e => setCommand(e.target.value),\n        onKeyPress: e => {\n          if (e.key === 'Enter') {\n            executeCommand();\n            setCommand(''); // Clear the input\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: executeCommand,\n        children: \"Execute\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Terminal, \"tbUxiTy4iUsBfY0R9wCFgwuTSpE=\");\n_c = Terminal;\nvar _c;\n$RefreshReg$(_c, \"Terminal\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Terminal","_s","command","setCommand","output","setOutput","threads","setThreads","executeCommand","toLowerCase","newThread","id","Date","now","process","subprocess","Popen","shell","stdout","PIPE","stderr","on","data","push","toString","code","children","className","map","thread","fileName","_jsxFileName","lineNumber","columnNumber","join","type","value","onChange","e","target","onKeyPress","key","onClick","_c","$RefreshReg$"],"sources":["/home/hatice/Documents/BTK_PROJECTS/SYSTEM_PROJECT/frontend/src/Components/Terminal/terminal.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './terminal.css';\n\nexport const Terminal = () => {\n    const [command, setCommand] = useState('');\n    const [output, setOutput] = useState('');\n    const [threads, setThreads] = useState([]);\n    \n    const executeCommand = () => {\n        if (command.toLowerCase() === 'quit()') {\n            // Handle quit command\n            return;\n        }\n\n        const newThread = {\n            id: Date.now(),\n            command: command,\n            output: [],\n        };\n\n        setThreads([...threads, newThread]);\n\n        const process = subprocess.Popen(command, {\n            shell: true,\n            stdout: subprocess.PIPE,\n            stderr: subprocess.PIPE,\n        });\n\n        process.stdout.on('data', (data) => {\n            newThread.output.push(data.toString('utf-8'));\n            setThreads([...threads]);\n        });\n\n        process.stderr.on('data', (data) => {\n            newThread.output.push(`Error:\\n${data.toString('utf-8')}`);\n            setThreads([...threads]);\n        });\n\n        process.on('close', (code) => {\n            newThread.output.push(`Command exited with code ${code}`);\n            setThreads([...threads]);\n        });\n    }\n\n    return (\n        <>\n            <div className='terminal-container'>\n                <div className='terminal-output'>\n                    {threads.map((thread) => (\n                        <ul key={thread.id}>\n                            <li>Command: {thread.command}</li>\n                            <li>{thread.output.join('\\n')}</li>\n                        </ul>\n                    ))}\n                </div>\n            </div>\n            <div className='terminal-input'>\n                <input\n                    type='text'\n                    value={command}\n                    onChange={(e) => setCommand(e.target.value)}\n                    onKeyPress={(e) => {\n                        if (e.key === 'Enter') {\n                            executeCommand();\n                            setCommand(''); // Clear the input\n                        }\n                    }}\n                />\n                <button onClick={executeCommand}>Execute</button>\n            </div>\n        </>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}