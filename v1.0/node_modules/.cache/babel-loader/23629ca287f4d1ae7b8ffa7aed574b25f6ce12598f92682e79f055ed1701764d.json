{"ast":null,"code":"var _jsxFileName = \"/home/hatice/Documents/BTK_PROJECTS/SYSTEM_PROJECT/frontend/src/Components/Terminal/terminal.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './terminal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Terminal = ({\n  listOfThreads\n}) => {\n  _s();\n  const [command, setCommand] = useState('');\n  const [output, setOutput] = useState('');\n  const handleCommandInput = event => {\n    setCommand(event.target.value);\n  };\n  const executeCommand = () => {\n    // Your code for executing the command goes here\n    if (command.toLowerCase() === 'quit()') {\n      setOutput(\"Program Terminated.\");\n    } else {\n      // Replace the code below with your command execution logic\n      // For simplicity, we'll just set the output to a static message.\n      setOutput(\"Command executed: \" + command);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"terminal-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"terminal-output\",\n        children: listOfThreads.map(thread => {\n          return /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"Command: \", thread.command]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: thread.output\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 33\n            }, this)]\n          }, thread.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"terminal-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: command,\n        onChange: handleCommandInput,\n        onKeyPress: e => {\n          if (e.key === 'Enter') {\n            executeCommand();\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: executeCommand,\n        children: \"Execute\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Terminal, \"1BW7eS84CVJBqmz6qGT5y8fnN8A=\");\n_c = Terminal;\nvar _c;\n$RefreshReg$(_c, \"Terminal\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Terminal","listOfThreads","_s","command","setCommand","output","setOutput","handleCommandInput","event","target","value","executeCommand","toLowerCase","children","className","map","thread","fileName","_jsxFileName","lineNumber","columnNumber","id","type","onChange","onKeyPress","e","key","onClick","_c","$RefreshReg$"],"sources":["/home/hatice/Documents/BTK_PROJECTS/SYSTEM_PROJECT/frontend/src/Components/Terminal/terminal.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './terminal.css';\n\nexport const Terminal = ({ listOfThreads }) => {\n    const [command, setCommand] = useState('');\n    const [output, setOutput] = useState('');\n\n    const handleCommandInput = (event) => {\n        setCommand(event.target.value);\n    }\n\n    const executeCommand = () => {\n        // Your code for executing the command goes here\n        if (command.toLowerCase() === 'quit()') {\n            setOutput(\"Program Terminated.\");\n        } else {\n            // Replace the code below with your command execution logic\n            // For simplicity, we'll just set the output to a static message.\n            setOutput(\"Command executed: \" + command);\n        }\n    }\n\n    return (\n        <>\n            <div className='terminal-container'>\n                <div className='terminal-output'>\n                    {listOfThreads.map(thread => {\n                        return (\n                            <ul key={thread.id}>\n                                <li>Command: {thread.command}</li>\n                                <li>{thread.output}</li>\n                            </ul>\n                        )\n                    })}\n                </div>\n            </div>\n            <div className='terminal-input'>\n                <input\n                    type='text'\n                    value={command}\n                    onChange={handleCommandInput}\n                    onKeyPress={(e) => {\n                        if (e.key === 'Enter') {\n                            executeCommand();\n                        }\n                    }}\n                />\n                <button onClick={executeCommand}>Execute</button>\n            </div>\n        </>\n    )\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAExB,OAAO,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMY,kBAAkB,GAAIC,KAAK,IAAK;IAClCJ,UAAU,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAClC,CAAC;EAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;IACzB;IACA,IAAIR,OAAO,CAACS,WAAW,CAAC,CAAC,KAAK,QAAQ,EAAE;MACpCN,SAAS,CAAC,qBAAqB,CAAC;IACpC,CAAC,MAAM;MACH;MACA;MACAA,SAAS,CAAC,oBAAoB,GAAGH,OAAO,CAAC;IAC7C;EACJ,CAAC;EAED,oBACIN,OAAA,CAAAE,SAAA;IAAAc,QAAA,gBACIhB,OAAA;MAAKiB,SAAS,EAAC,oBAAoB;MAAAD,QAAA,eAC/BhB,OAAA;QAAKiB,SAAS,EAAC,iBAAiB;QAAAD,QAAA,EAC3BZ,aAAa,CAACc,GAAG,CAACC,MAAM,IAAI;UACzB,oBACInB,OAAA;YAAAgB,QAAA,gBACIhB,OAAA;cAAAgB,QAAA,GAAI,WAAS,EAACG,MAAM,CAACb,OAAO;YAAA;cAAAc,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAClCvB,OAAA;cAAAgB,QAAA,EAAKG,MAAM,CAACX;YAAM;cAAAY,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA,GAFnBJ,MAAM,CAACK,EAAE;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAGd,CAAC;QAEb,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eACNvB,OAAA;MAAKiB,SAAS,EAAC,gBAAgB;MAAAD,QAAA,gBAC3BhB,OAAA;QACIyB,IAAI,EAAC,MAAM;QACXZ,KAAK,EAAEP,OAAQ;QACfoB,QAAQ,EAAEhB,kBAAmB;QAC7BiB,UAAU,EAAGC,CAAC,IAAK;UACf,IAAIA,CAAC,CAACC,GAAG,KAAK,OAAO,EAAE;YACnBf,cAAc,CAAC,CAAC;UACpB;QACJ;MAAE;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACFvB,OAAA;QAAQ8B,OAAO,EAAEhB,cAAe;QAAAE,QAAA,EAAC;MAAO;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC;EAAA,eACR,CAAC;AAEX,CAAC;AAAAlB,EAAA,CAhDYF,QAAQ;AAAA4B,EAAA,GAAR5B,QAAQ;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}