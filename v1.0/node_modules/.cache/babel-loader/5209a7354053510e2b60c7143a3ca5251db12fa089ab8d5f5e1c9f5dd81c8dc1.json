{"ast":null,"code":"var _jsxFileName = \"/home/hatice/Documents/BTK_PROJECTS/SYSTEM_PROJECT/frontend/src/Components/Terminal/terminal.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './terminal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Terminal = ({\n  listOfThreads\n}) => {\n  _s();\n  const [prompt, setPrompt] = useState('');\n  const [clearTerminal, setClearTerminal] = useState(false);\n  useEffect(() => {\n    fetch('/get_prompt').then(response => response.json()).then(data => {\n      setPrompt(data.prompt);\n      if (clearTerminal) {\n        // Eğer clearTerminal true ise, temizle\n        setClearTerminal(false);\n        listOfThreads.length = 0; // İş parçacıklarını temizle\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  }, [clearTerminal]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"terminal-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"terminal-output\",\n        children: listOfThreads.map(thread => {\n          return /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: `${prompt}${thread.command}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: thread.output\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 33\n            }, this)]\n          }, thread.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(Terminal, \"gGVWOhzIrLsMLgUWPVnbOOd1+B8=\");\n_c = Terminal;\nvar _c;\n$RefreshReg$(_c, \"Terminal\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Terminal","listOfThreads","_s","prompt","setPrompt","clearTerminal","setClearTerminal","fetch","then","response","json","data","length","catch","error","console","log","children","className","map","thread","command","fileName","_jsxFileName","lineNumber","columnNumber","output","id","_c","$RefreshReg$"],"sources":["/home/hatice/Documents/BTK_PROJECTS/SYSTEM_PROJECT/frontend/src/Components/Terminal/terminal.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './terminal.css';\n\nexport const Terminal = ({ listOfThreads }) => {\n    const [prompt, setPrompt] = useState('');\n    const [clearTerminal, setClearTerminal] = useState(false);\n\n\n    useEffect(() => {\n        fetch('/get_prompt')\n        .then(response => response.json())\n        .then(data => {\n            setPrompt(data.prompt);\n            if (clearTerminal) { // Eğer clearTerminal true ise, temizle\n                setClearTerminal(false);\n                listOfThreads.length = 0; // İş parçacıklarını temizle\n            }\n        })\n        .catch(error => {\n            console.log(error);\n        });\n}, [clearTerminal]);\n\n    return (\n        <>\n            <div className='terminal-container'>\n                <div className='terminal-output'>\n                    {listOfThreads.map(thread => {\n                        return (\n                            <ul key={thread.id}>\n                                <li>{`${prompt}${thread.command}`}</li>\n                                <li>{thread.output}</li>\n                            </ul>\n                        )\n                    })}\n                </div>\n            </div>\n        </>\n    )\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAExB,OAAO,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAGzDD,SAAS,CAAC,MAAM;IACZa,KAAK,CAAC,aAAa,CAAC,CACnBC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACVP,SAAS,CAACO,IAAI,CAACR,MAAM,CAAC;MACtB,IAAIE,aAAa,EAAE;QAAE;QACjBC,gBAAgB,CAAC,KAAK,CAAC;QACvBL,aAAa,CAACW,MAAM,GAAG,CAAC,CAAC,CAAC;MAC9B;IACJ,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACtB,CAAC,CAAC;EACV,CAAC,EAAE,CAACT,aAAa,CAAC,CAAC;EAEf,oBACIR,OAAA,CAAAE,SAAA;IAAAkB,QAAA,eACIpB,OAAA;MAAKqB,SAAS,EAAC,oBAAoB;MAAAD,QAAA,eAC/BpB,OAAA;QAAKqB,SAAS,EAAC,iBAAiB;QAAAD,QAAA,EAC3BhB,aAAa,CAACkB,GAAG,CAACC,MAAM,IAAI;UACzB,oBACIvB,OAAA;YAAAoB,QAAA,gBACIpB,OAAA;cAAAoB,QAAA,EAAM,GAAEd,MAAO,GAAEiB,MAAM,CAACC,OAAQ;YAAC;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACvC5B,OAAA;cAAAoB,QAAA,EAAKG,MAAM,CAACM;YAAM;cAAAJ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA,GAFnBL,MAAM,CAACO,EAAE;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAGd,CAAC;QAEb,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC,gBACR,CAAC;AAEX,CAAC;AAAAvB,EAAA,CApCYF,QAAQ;AAAA4B,EAAA,GAAR5B,QAAQ;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}