{"ast":null,"code":"var _jsxFileName = \"/home/hatice/Documents/BTK_PROJECTS/SYSTEM_PROJECT/frontend/src/Components/Terminal/terminal.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './terminal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Terminal = ({\n  listOfThreads,\n  promptDirectory\n}) => {\n  _s();\n  const [commandOutput, setCommandOutput] = useState({});\n  useEffect(() => {\n    // Redis'ten komut çıktılarını alın\n    if (listOfThreads && listOfThreads.length > 0) {\n      listOfThreads.forEach(thread => {\n        fetch(`/thread/output/${thread.command}`).then(response => response.json()).then(data => {\n          setCommandOutput(prevOutput => ({\n            ...prevOutput,\n            [thread.command]: data.output\n          }));\n        }).catch(error => {\n          console.error('Error:', error);\n        });\n      });\n    }\n  }, [listOfThreads]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"terminal-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"terminal-output\",\n        children: listOfThreads.map(thread => {\n          return /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: [promptDirectory, \" \", thread.command]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: commandOutput[thread.command]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 33\n            }, this)]\n          }, thread.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(Terminal, \"TANa7y28pSXbMX80Gpg/dbNOfaQ=\");\n_c = Terminal;\nvar _c;\n$RefreshReg$(_c, \"Terminal\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Terminal","listOfThreads","promptDirectory","_s","commandOutput","setCommandOutput","length","forEach","thread","fetch","command","then","response","json","data","prevOutput","output","catch","error","console","children","className","map","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["/home/hatice/Documents/BTK_PROJECTS/SYSTEM_PROJECT/frontend/src/Components/Terminal/terminal.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './terminal.css';\n\nexport const Terminal = ({ listOfThreads, promptDirectory }) => {\n    const [commandOutput, setCommandOutput] = useState({});\n\n    useEffect(() => {\n        // Redis'ten komut çıktılarını alın\n        if (listOfThreads && listOfThreads.length > 0) {\n            listOfThreads.forEach(thread => {\n                fetch(`/thread/output/${thread.command}`)\n                    .then(response => response.json())\n                    .then(data => {\n                        setCommandOutput(prevOutput => ({\n                            ...prevOutput,\n                            [thread.command]: data.output,\n                        }));\n                    })\n                    .catch(error => {\n                        console.error('Error:', error);\n                    });\n            });\n        }\n    }, [listOfThreads]);\n\n    return (\n        <>\n            <div className='terminal-container'>\n                <div className='terminal-output'>\n                    {listOfThreads.map(thread => {\n                        return (\n                            <ul key={thread.id}>\n                                <li>{promptDirectory} {thread.command}</li>\n                                <li>{commandOutput[thread.command]}</li>\n                            </ul>\n                        )\n                    })}\n                </div>\n            </div>\n        </>\n    )\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAExB,OAAO,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,aAAa;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EAC5D,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEtDD,SAAS,CAAC,MAAM;IACZ;IACA,IAAIO,aAAa,IAAIA,aAAa,CAACK,MAAM,GAAG,CAAC,EAAE;MAC3CL,aAAa,CAACM,OAAO,CAACC,MAAM,IAAI;QAC5BC,KAAK,CAAE,kBAAiBD,MAAM,CAACE,OAAQ,EAAC,CAAC,CACpCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;UACVT,gBAAgB,CAACU,UAAU,KAAK;YAC5B,GAAGA,UAAU;YACb,CAACP,MAAM,CAACE,OAAO,GAAGI,IAAI,CAACE;UAC3B,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;UACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;QAClC,CAAC,CAAC;MACV,CAAC,CAAC;IACN;EACJ,CAAC,EAAE,CAACjB,aAAa,CAAC,CAAC;EAEnB,oBACIJ,OAAA,CAAAE,SAAA;IAAAqB,QAAA,eACIvB,OAAA;MAAKwB,SAAS,EAAC,oBAAoB;MAAAD,QAAA,eAC/BvB,OAAA;QAAKwB,SAAS,EAAC,iBAAiB;QAAAD,QAAA,EAC3BnB,aAAa,CAACqB,GAAG,CAACd,MAAM,IAAI;UACzB,oBACIX,OAAA;YAAAuB,QAAA,gBACIvB,OAAA;cAAAuB,QAAA,GAAKlB,eAAe,EAAC,GAAC,EAACM,MAAM,CAACE,OAAO;YAAA;cAAAa,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAC3C7B,OAAA;cAAAuB,QAAA,EAAKhB,aAAa,CAACI,MAAM,CAACE,OAAO;YAAC;cAAAa,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA,GAFnClB,MAAM,CAACmB,EAAE;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAGd,CAAC;QAEb,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC,gBACR,CAAC;AAEX,CAAC;AAAAvB,EAAA,CAtCYH,QAAQ;AAAA4B,EAAA,GAAR5B,QAAQ;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}