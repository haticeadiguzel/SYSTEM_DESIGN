{"ast":null,"code":"var _jsxFileName = \"/home/hatice/Documents/BTK_PROJECTS/SYSTEM_PROJECT/frontend/src/Components/Terminal/terminal.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './terminal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  exec\n} = require('child_process');\nexport const Terminal = () => {\n  _s();\n  const [command, setCommand] = useState('');\n  const [output, setOutput] = useState('');\n  const [threads, setThreads] = useState([]);\n  const executeCommand = () => {\n    if (command.toLowerCase() === 'quit()') {\n      // Handle quit command\n      return;\n    }\n    const newThread = {\n      id: Date.now(),\n      command: command,\n      output: []\n    };\n    setThreads([...threads, newThread]);\n    const childProcess = exec(command, (error, stdout, stderr) => {\n      if (error) {\n        newThread.output.push(`Error: ${error.message}`);\n      }\n      if (stderr) {\n        newThread.output.push(`Error:\\n${stderr}`);\n      }\n      if (stdout) {\n        newThread.output.push(stdout);\n      }\n      setThreads([...threads]);\n    });\n    childProcess.on('close', code => {\n      newThread.output.push(`Command exited with code ${code}`);\n      setThreads([...threads]);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"terminal-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"terminal-output\",\n        children: threads.map(thread => /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Command: \", thread.command]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: thread.output.join('\\n')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 29\n          }, this)]\n        }, thread.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"terminal-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: command,\n        onChange: e => setCommand(e.target.value),\n        onKeyPress: e => {\n          if (e.key === 'Enter') {\n            executeCommand();\n            setCommand(''); // Clear the input\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: executeCommand,\n        children: \"Execute\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Terminal, \"tbUxiTy4iUsBfY0R9wCFgwuTSpE=\");\n_c = Terminal;\nvar _c;\n$RefreshReg$(_c, \"Terminal\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","exec","require","Terminal","_s","command","setCommand","output","setOutput","threads","setThreads","executeCommand","toLowerCase","newThread","id","Date","now","childProcess","error","stdout","stderr","push","message","on","code","children","className","map","thread","fileName","_jsxFileName","lineNumber","columnNumber","join","type","value","onChange","e","target","onKeyPress","key","onClick","_c","$RefreshReg$"],"sources":["/home/hatice/Documents/BTK_PROJECTS/SYSTEM_PROJECT/frontend/src/Components/Terminal/terminal.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './terminal.css';\nconst { exec } = require('child_process');\n\nexport const Terminal = () => {\n    const [command, setCommand] = useState('');\n    const [output, setOutput] = useState('');\n    const [threads, setThreads] = useState([]);\n    \n    const executeCommand = () => {\n        if (command.toLowerCase() === 'quit()') {\n            // Handle quit command\n            return;\n        }\n\n        const newThread = {\n            id: Date.now(),\n            command: command,\n            output: [],\n        };\n\n        setThreads([...threads, newThread]);\n\n        const childProcess = exec(command, (error, stdout, stderr) => {\n            if (error) {\n                newThread.output.push(`Error: ${error.message}`);\n            }\n            if (stderr) {\n                newThread.output.push(`Error:\\n${stderr}`);\n            }\n            if (stdout) {\n                newThread.output.push(stdout);\n            }\n            setThreads([...threads]);\n        });\n\n        childProcess.on('close', (code) => {\n            newThread.output.push(`Command exited with code ${code}`);\n            setThreads([...threads]);\n        });\n    }\n\n    return (\n        <>\n            <div className='terminal-container'>\n                <div className='terminal-output'>\n                    {threads.map((thread) => (\n                        <ul key={thread.id}>\n                            <li>Command: {thread.command}</li>\n                            <li>{thread.output.join('\\n')}</li>\n                        </ul>\n                    ))}\n                </div>\n            </div>\n            <div className='terminal-input'>\n                <input\n                    type='text'\n                    value={command}\n                    onChange={(e) => setCommand(e.target.value)}\n                    onKeyPress={(e) => {\n                        if (e.key === 'Enter') {\n                            executeCommand();\n                            setCommand(''); // Clear the input\n                        }\n                    }}\n                />\n                <button onClick={executeCommand}>Execute</button>\n            </div>\n        </>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}