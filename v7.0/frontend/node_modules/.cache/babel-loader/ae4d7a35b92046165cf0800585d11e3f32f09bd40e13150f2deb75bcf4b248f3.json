{"ast":null,"code":"var _jsxFileName = \"/home/hatice/Documents/BTK_PROJECTS/SYSTEM_PROJECT/frontend/src/Pages/ThreadPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Terminal } from \"../Components/Terminal/terminal\";\nimport { Form } from \"../Components/Form/form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThreadPage = () => {\n  _s();\n  const [thread, setThread] = useState([]);\n  const [addThread, setAddThread] = useState('');\n  const [prompt, setPrompt] = useState('');\n  useEffect(() => {\n    fetch('/thread').then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(data => setThread(data));\n  }, []);\n  useEffect(() => {\n    fetch('/get_prompt').then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(data => setPrompt(data.prompt));\n  }, []);\n  const handleFormChange = inputValue => {\n    setAddThread(inputValue);\n  };\n  const handleFormSubmit = () => {\n    fetch('/thread/create', {\n      method: 'POST',\n      body: JSON.stringify({\n        command: addThread\n      }),\n      headers: {\n        'Content-Type': 'application/json; charset=UTF-8'\n      }\n    }).then(response => response.json()).then(responseData => {\n      console.log(responseData);\n      setAddThread('');\n      getLatestThreads();\n    });\n  };\n  const handlePromptChange = () => {\n    fetch('/set_prompt', {\n      method: 'POST',\n      body: JSON.stringify({\n        prompt: prompt\n      }),\n      headers: {\n        'Content-Type': 'application/json; charset=UTF-8'\n      }\n    }).then(response => response.json()).then(responseData => {\n      console.log(responseData);\n      getLatestPrompt();\n    });\n  };\n  const getLatestThreads = () => {\n    fetch('/thread').then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(data => setThread(data));\n  };\n  const getLatestPrompt = () => {\n    fetch('/get_prompt').then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(data => setPrompt(data));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      userInput: addThread,\n      onFormChange: handleFormChange,\n      onFormSubmit: handleFormSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Terminal, {\n      listOfThreads: thread,\n      onPromptUpdate: handlePromptChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n_s(ThreadPage, \"YBnm/QnVPRbjmMalyZTEothlpCg=\");\n_c = ThreadPage;\nvar _c;\n$RefreshReg$(_c, \"ThreadPage\");","map":{"version":3,"names":["React","useState","useEffect","Terminal","Form","jsxDEV","_jsxDEV","ThreadPage","_s","thread","setThread","addThread","setAddThread","prompt","setPrompt","fetch","then","response","ok","json","data","handleFormChange","inputValue","handleFormSubmit","method","body","JSON","stringify","command","headers","responseData","console","log","getLatestThreads","handlePromptChange","getLatestPrompt","children","userInput","onFormChange","onFormSubmit","fileName","_jsxFileName","lineNumber","columnNumber","listOfThreads","onPromptUpdate","_c","$RefreshReg$"],"sources":["/home/hatice/Documents/BTK_PROJECTS/SYSTEM_PROJECT/frontend/src/Pages/ThreadPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Terminal } from \"../Components/Terminal/terminal\";\nimport { Form } from \"../Components/Form/form\";\n\nexport const ThreadPage = () => {\n\n    const [thread, setThread] = useState([]);\n    const [addThread, setAddThread] = useState('');\n    const [prompt, setPrompt] = useState('');\n\n    useEffect(() => {\n        fetch('/thread')\n            .then(response => {\n                if (response.ok) {\n                    return response.json()\n                }\n            }).then(data => setThread(data))\n    }, [])\n\n    useEffect(() => {\n        fetch('/get_prompt')\n            .then(response => {\n                if (response.ok) {\n                    return response.json()\n                }\n            })\n            .then(data => setPrompt(data.prompt))\n    }, []);\n\n    const handleFormChange = (inputValue) => {\n        setAddThread(inputValue);\n    }\n\n    const handleFormSubmit = () => {\n        fetch('/thread/create', {\n            method: 'POST',\n            body: JSON.stringify({\n                command: addThread\n            }),\n            headers: {\n                'Content-Type': 'application/json; charset=UTF-8'\n            }\n        }).then(response => response.json())\n            .then(responseData => {\n                console.log(responseData)\n                setAddThread('')\n                getLatestThreads()\n            })\n\n    }\n\n    const handlePromptChange = () => {\n        fetch('/set_prompt', {\n            method: 'POST',\n            body: JSON.stringify({\n                prompt: prompt\n            }),\n            headers: {\n                'Content-Type': 'application/json; charset=UTF-8'\n            }\n        }).then(response => response.json())\n            .then(responseData => {\n                console.log(responseData)\n                getLatestPrompt()\n            })\n    }\n\n    const getLatestThreads = () => {\n        fetch('/thread').then(response => {\n            if (response.ok) {\n                return response.json()\n            }\n        }).then(data => setThread(data))\n    }\n\n    const getLatestPrompt = () => {\n        fetch('/get_prompt').then(response => {\n            if (response.ok) {\n                return response.json()\n            }\n        }).then(data => setPrompt(data))\n    }\n\n    return (\n        <div>\n            <Form userInput={addThread} onFormChange={handleFormChange} onFormSubmit={handleFormSubmit} />\n            <Terminal listOfThreads={thread} onPromptUpdate={handlePromptChange}/>\n        </div>\n    );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}