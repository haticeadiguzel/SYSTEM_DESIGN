{"ast":null,"code":"var _jsxFileName = \"/home/hatice/Documents/BTK_PROJECTS/SYSTEM_PROJECT/frontend/src/Pages/ThreadPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Terminal } from \"../Components/Terminal/terminal\";\nimport { Form } from \"../Components/Form/form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThreadPage = () => {\n  _s();\n  const [thread, setThread] = useState([]);\n  const [addThread, setAddThread] = useState('');\n  useEffect(() => {\n    fetch('/thread').then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(data => setThread(data));\n  }, []);\n  const handleFormChange = inputValue => {\n    setAddThread(inputValue);\n  };\n  const handleFormSubmit = () => {\n    fetch('/thread/create', {\n      method: 'POST',\n      body: JSON.stringify({\n        command: addThread\n      }),\n      headers: {\n        'Content-Type': 'application/json; charset=UTF-8'\n      }\n    }).then(response => response.json()).then(responseData => {\n      console.log(responseData);\n      setAddThread('');\n      getLatestThreads();\n    });\n  };\n  const getLatestThreads = () => {\n    fetch('/thread').then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(data => setThread(data));\n  };\n  const clearScreen = () => {\n    // Ekrandaki verileri temizle\n    setThread([]);\n    // Sunucuya \"clear\" komutunu gönder\n    fetch('/thread/create', {\n      method: 'POST',\n      body: JSON.stringify({\n        command: 'clear'\n      }),\n      headers: {\n        'Content-Type': 'application/json; charset=UTF-8'\n      }\n    }).then(response => response.json()).then(responseData => {\n      console.log(responseData);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      userInput: addThread,\n      onFormChange: handleFormChange,\n      onFormSubmit: handleFormSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Terminal, {\n      listOfThreads: thread,\n      clearScreen: clearScreen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n_s(ThreadPage, \"DECnspaed+ORHofQb5Ef7jCqbi8=\");\n_c = ThreadPage;\nvar _c;\n$RefreshReg$(_c, \"ThreadPage\");","map":{"version":3,"names":["React","useState","useEffect","Terminal","Form","jsxDEV","_jsxDEV","ThreadPage","_s","thread","setThread","addThread","setAddThread","fetch","then","response","ok","json","data","handleFormChange","inputValue","handleFormSubmit","method","body","JSON","stringify","command","headers","responseData","console","log","getLatestThreads","clearScreen","children","userInput","onFormChange","onFormSubmit","fileName","_jsxFileName","lineNumber","columnNumber","listOfThreads","_c","$RefreshReg$"],"sources":["/home/hatice/Documents/BTK_PROJECTS/SYSTEM_PROJECT/frontend/src/Pages/ThreadPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Terminal } from \"../Components/Terminal/terminal\";\nimport { Form } from \"../Components/Form/form\";\n\nexport const ThreadPage = () => {\n\n    const [thread, setThread] = useState([]);\n    const [addThread, setAddThread] = useState('');\n\n    useEffect(() => {\n        fetch('/thread').then(response => {\n            if (response.ok) {\n                return response.json()\n            }\n        }).then(data => setThread(data))\n    }, [])\n\n    const handleFormChange = (inputValue) => {\n        setAddThread(inputValue);\n    }\n\n    const handleFormSubmit = () => {\n        fetch('/thread/create', {\n            method: 'POST',\n            body: JSON.stringify({\n                command: addThread\n            }),\n            headers: {\n                'Content-Type': 'application/json; charset=UTF-8'\n            }\n        }).then(response => response.json())\n            .then(responseData => {\n                console.log(responseData);\n                setAddThread('');\n                getLatestThreads();\n            })\n    }\n\n    const getLatestThreads = () => {\n        fetch('/thread').then(response => {\n            if (response.ok) {\n                return response.json()\n            }\n        }).then(data => setThread(data))\n    }\n\n    const clearScreen = () => {\n        // Ekrandaki verileri temizle\n        setThread([]);\n        // Sunucuya \"clear\" komutunu gönder\n        fetch('/thread/create', {\n            method: 'POST',\n            body: JSON.stringify({\n                command: 'clear'\n            }),\n            headers: {\n                'Content-Type': 'application/json; charset=UTF-8'\n            }\n        }).then(response => response.json())\n            .then(responseData => {\n                console.log(responseData);\n            });\n    }\n\n    return (\n        <div>\n            <Form userInput={addThread} onFormChange={handleFormChange} onFormSubmit={handleFormSubmit} />\n            <Terminal listOfThreads={thread} clearScreen={clearScreen} />\n        </div>\n    );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}