{"ast":null,"code":"var _jsxFileName = \"/home/hatice/Documents/BTK_PROJECTS/SYSTEM_PROJECT/frontend/src/Pages/ThreadPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Terminal } from \"../Components/Terminal/terminal\";\nimport { Form } from \"../Components/Form/form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThreadPage = () => {\n  _s();\n  const [thread, setThread] = useState([]);\n  const [addThread, setAddThread] = useState('');\n  const [promptDirectory, setPromptDirectory] = useState('');\n  useEffect(() => {\n    // Get data from local storage and set it in the state\n    const storedData = localStorage.getItem('threadData');\n    if (storedData) {\n      setThread(JSON.parse(storedData));\n    }\n  }, []);\n  useEffect(() => {\n    fetch('/get_os').then(response => response.json()).then(data => {\n      setPromptDirectory(data.prompt_directory);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  }, []);\n  const handleFormChange = inputValue => {\n    setAddThread(inputValue);\n  };\n  const handleFormSubmit = () => {\n    fetch('/thread/create', {\n      method: 'POST',\n      body: JSON.stringify({\n        command: addThread\n      }),\n      headers: {\n        'Content-Type': 'application/json; charset=UTF-8'\n      }\n    }).then(response => response.json()).then(responseData => {\n      setAddThread('');\n      if (addThread === 'clear') {\n        // Clear the terminal and remove data from local storage\n        setThread([]);\n        localStorage.removeItem('threadData'); // Remove data from local storage\n      } else {\n        // Add the new command to the thread and update local storage\n        const updatedThread = [...thread, addThread];\n        setThread(updatedThread);\n        localStorage.setItem('threadData', JSON.stringify(updatedThread));\n      }\n      getLatestPromptDirectory();\n    });\n  };\n  const getLatestThreads = () => {\n    fetch('/thread').then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(data => setThread(data));\n  };\n  const getLatestPromptDirectory = () => {\n    fetch('/get_os').then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(data => setPromptDirectory(data.prompt_directory));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      userInput: addThread,\n      onFormChange: handleFormChange,\n      onFormSubmit: handleFormSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Terminal, {\n      listOfThreads: thread\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n_s(ThreadPage, \"D+kCFC3CCgPqK60RQKuXQL6W+AY=\");\n_c = ThreadPage;\nvar _c;\n$RefreshReg$(_c, \"ThreadPage\");","map":{"version":3,"names":["React","useState","useEffect","Terminal","Form","jsxDEV","_jsxDEV","ThreadPage","_s","thread","setThread","addThread","setAddThread","promptDirectory","setPromptDirectory","storedData","localStorage","getItem","JSON","parse","fetch","then","response","json","data","prompt_directory","catch","error","console","handleFormChange","inputValue","handleFormSubmit","method","body","stringify","command","headers","responseData","removeItem","updatedThread","setItem","getLatestPromptDirectory","getLatestThreads","ok","children","userInput","onFormChange","onFormSubmit","fileName","_jsxFileName","lineNumber","columnNumber","listOfThreads","_c","$RefreshReg$"],"sources":["/home/hatice/Documents/BTK_PROJECTS/SYSTEM_PROJECT/frontend/src/Pages/ThreadPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Terminal } from \"../Components/Terminal/terminal\";\nimport { Form } from \"../Components/Form/form\";\n\nexport const ThreadPage = () => {\n    const [thread, setThread] = useState([]);\n    const [addThread, setAddThread] = useState('');\n    const [promptDirectory, setPromptDirectory] = useState('');\n\n    useEffect(() => {\n        // Get data from local storage and set it in the state\n        const storedData = localStorage.getItem('threadData');\n        if (storedData) {\n            setThread(JSON.parse(storedData));\n        }\n    }, []);\n\n    useEffect(() => {\n        fetch('/get_os')\n            .then(response => response.json())\n            .then(data => {\n                setPromptDirectory(data.prompt_directory);\n            })\n            .catch(error => {\n                console.error('Error:', error);\n            });\n    }, []);\n\n    const handleFormChange = (inputValue) => {\n        setAddThread(inputValue);\n    }\n\n    const handleFormSubmit = () => {\n        fetch('/thread/create', {\n            method: 'POST',\n            body: JSON.stringify({\n                command: addThread\n            }),\n            headers: {\n                'Content-Type': 'application/json; charset=UTF-8'\n            }\n        }).then(response => response.json())\n            .then(responseData => {\n                setAddThread('');\n\n                if (addThread === 'clear') {\n                    // Clear the terminal and remove data from local storage\n                    setThread([]);\n                    localStorage.removeItem('threadData'); // Remove data from local storage\n                } else {\n                    // Add the new command to the thread and update local storage\n                    const updatedThread = [...thread, addThread];\n                    setThread(updatedThread);\n                    localStorage.setItem('threadData', JSON.stringify(updatedThread));\n                }\n\n                getLatestPromptDirectory();\n            });\n    }\n\n    const getLatestThreads = () => {\n        fetch('/thread').then(response => {\n            if (response.ok) {\n                return response.json()\n            }\n        }).then(data => setThread(data));\n    }\n\n    const getLatestPromptDirectory = () => {\n        fetch('/get_os').then (response => {\n            if (response.ok) {\n                return response.json()\n            }\n        }).then(data => setPromptDirectory(data.prompt_directory));\n    }\n\n    return (\n        <div>\n            <Form userInput={addThread} onFormChange={handleFormChange} onFormSubmit={handleFormSubmit} />\n            <Terminal listOfThreads={thread} />\n        </div>\n    );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}